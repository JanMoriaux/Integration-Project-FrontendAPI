using FrontEndAPI.Models.Database.Repository.ActivityRepo;
using FrontEndAPI.Models.Entities;
using FrontEndAPI.Utility;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Serialization;

namespace FrontEndAPI.XML.Wrappers
{
    /*
     * 
     * Autogenerated from http://xmltocsharp.azurewebsites.net/
     * 
     */

    [XmlRoot(ElementName = "message", Namespace = "http://s2it.ehb.be/messages")]
    public class ActivityMessage
    {
        private static readonly string XMLNS = "http://s2it.ehb.be/messages";
        private static readonly string SCHEMALOCATION = "http://s2it.ehb.be/messages http://dtsw.ehb.be/~jan.moriaux/xml/ActivityMessage.xsd";
        private static readonly string TYPEID = "3";
        private static readonly string SENDERUUID = "0a6cca47-af4c-41d8-a3ed-86ff5a00f388";

        [XmlElement(ElementName = "uuid", Namespace = "http://s2it.ehb.be/messages")]
        public string Uuid { get; set; }
        [XmlElement(ElementName = "version", Namespace = "http://s2it.ehb.be/messages")]
        public string Version { get; set; }
        [XmlElement(ElementName = "isActive", Namespace = "http://s2it.ehb.be/messages")]
        public string IsActive { get; set; }
        [XmlElement(ElementName = "name", Namespace = "http://s2it.ehb.be/messages")]
        public string Name { get; set; }
        [XmlElement(ElementName = "description", Namespace = "http://s2it.ehb.be/messages")]
        public string Description { get; set; }
        [XmlElement(ElementName = "startTime", Namespace = "http://s2it.ehb.be/messages")]
        public string StartTime { get; set; }
        [XmlElement(ElementName = "endTime", Namespace = "http://s2it.ehb.be/messages")]
        public string EndTime { get; set; }
        [XmlElement(ElementName = "eventUUID", Namespace = "http://s2it.ehb.be/messages")]
        public string EventUUID { get; set; }
        [XmlElement(ElementName = "speakerUUID", Namespace = "http://s2it.ehb.be/messages")]
        public string SpeakerUUID { get; set; }
        [XmlElement(ElementName = "price", Namespace = "http://s2it.ehb.be/messages")]
        public string Price { get; set; }
        [XmlElement(ElementName = "remainingCapacity", Namespace = "http://s2it.ehb.be/messages")]
        public string RemainingCapacity { get; set; }
        [XmlAttribute(AttributeName = "xmlns")]
        public string Xmlns { get; set; }
        [XmlAttribute(AttributeName = "schemaLocation", Namespace = "http://www.w3.org/2001/XMLSchema-instance")]
        public string SchemaLocation { get; set; }
        [XmlAttribute(AttributeName = "typeId")]
        public string TypeId { get; set; }
        [XmlAttribute(AttributeName = "timestamp")]
        public string Timestamp { get; set; }
        [XmlAttribute(AttributeName = "senderUUID")]
        public string SenderUUID { get; set; }

        public static ActivityMessage FromActivityTuple(Tuple<Activity, string, string> activityWithEventUUIDAndSpeakerUUID)
        {
            Activity a = activityWithEventUUIDAndSpeakerUUID.Item1;
            string eventUUID = activityWithEventUUIDAndSpeakerUUID.Item2;
            string speakerUUID = activityWithEventUUIDAndSpeakerUUID.Item3;

            return new ActivityMessage
            {
                Uuid = a.UUID,
                Version = a.Version.ToString().ToLower(),
                IsActive = a.IsActive.ToString().ToLower(),
                Name = a.Name,
                Description = a.Description,
                StartTime = DateUtility.ConvertToStringWithZoneOffset(a.StartTime),
                EndTime = DateUtility.ConvertToStringWithZoneOffset(a.EndTime),
                EventUUID = eventUUID,
                SpeakerUUID = speakerUUID,
                Price = a.Price.ToString("F"),
                RemainingCapacity = a.RemainingCapacity.ToString(),
                Xmlns = XMLNS,
                SchemaLocation = SCHEMALOCATION,
                TypeId = TYPEID,
                Timestamp = DateUtility.ConvertToStringWithZoneOffset(DateTime.Now.ToLocalTime()),
                SenderUUID = SENDERUUID
            };
        }

        //public static ActivityMessage FromMessage(string xml)
        //{
        //    if (xml != null)
        //    {
        //        ActivityMessage actMessage = null;
        //        XmlSerializer serializer = new XmlSerializer(typeof(ActivityMessage));
        //        using (StringReader reader = new StringReader(xml))
        //        {
        //            actMessage = (ActivityMessage)serializer.Deserialize(reader);
        //            return actMessage;
        //        }
        //    }
        //    return null;
        //}

        //returns a Tuple with the partial Activity, an EventUUID and a SpeakerUUID
        //UUID's should be processed further to local ID's
        //public Tuple<Activity, string, string> ToActivityTuple()
        //{
        //    try
        //    {
        //        var act = new Activity
        //        {
        //            UUID = Uuid,
        //            Version = long.Parse(Version),
        //            IsActive = bool.Parse(IsActive),
        //            Name = Name,
        //            Description = Description,
        //            StartTime = (DateTime)DateUtility.ConvertFromStringWithZoneOffset(StartTime),
        //            EndTime = (DateTime)DateUtility.ConvertFromStringWithZoneOffset(EndTime),
        //            Price = decimal.Parse(Price),
        //            RemainingCapacity = int.Parse(RemainingCapacity),
        //        };
        //        return new Tuple<Activity, string, string>(act, EventUUID, SpeakerUUID);
        //    }
        //    catch (FormatException e)
        //    {
        //        System.Diagnostics.Debug.WriteLine(e.Message);
        //        return null;
        //    }
        //}
    }
}
